# docker compose build
# docker compose up -d

services:
  mongo:
    image: mongo
    container_name: cindexer-db
    ports:
      - 27019:27017
    volumes:
      - "./mongo_data:/data/db"
    restart: unless-stopped
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet

  zoo1:
    image: confluentinc/cp-zookeeper:7.3.2
    hostname: zoo1
    container_name: zoo1
    ports:
      - "2181:2181"
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo1:2888:3888

  kafka1:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka1
    container_name: kafka1
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    restart: unless-stopped
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      - zoo1

  prometheus:
    image: prom/prometheus:v2.54.1
    container_name: prometheus
    user: 999:999
    restart: unless-stopped
    ports:
      - 9090:9090
    extra_hosts:
      - host.docker.internal:host-gateway
    volumes:
      - ./app/monitoring/prometheus/data:/prometheus
      - ./app/monitoring/prometheus/config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./app/monitoring/prometheus/config/targets.json:/etc/prometheus/targets.json:ro
      - ./app/monitoring/alertmanager/config:/etc/alertmanager:ro

  indexer:
    build:
      context: .
      dockerfile: Dockerfile.indexer
    env_file: ./.env.prod
    restart: unless-stopped
    ports:
      - 3310:3310
    depends_on:
      mongo:
        condition: service_healthy
      kafka1:
        condition: service_healthy

  processor:
    build:
      context: .
      dockerfile: Dockerfile.processor
    env_file: ./.env.prod
    ports:
      - 3320:3320
    restart: unless-stopped
    depends_on:
      - indexer

  ogmios:
    image: cardanosolutions/cardano-node-ogmios:v6.7.0_9.1.1-mainnet
    container_name: cardano-node-ogmios
    restart: unless-stopped
    ports:
      - 1337:1337
    volumes:
      - /opt/cardano-mainnet/db:/db
